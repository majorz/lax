
fn tokenize(input)
   tokens = []

   line = 1
   col = 1
   pos = 1

   next = input

   loop
      if empty(back)
         break

      match match_token(next)
         token span back:
            tokens += {
               ^token: token
               ^span: span
               ^pos: pos
               ^line: line
               ^col: col
            }

            if token == ^new_line
               col = 1
               line += 1
            el
               col += span

            next = back

            pos += span
         ^err:
            ret ^err pos line col

   tokens

fn match_token(input)
   map = {
      space() : ^space

      '\n'    : ^new_line
      '\r\n'  : ^new_line
      '\r'    : ^new_line

      '**' : ^power
      '==' : ^equal
      '!=' : ^unequal
      '<=' : ^less_equal
      '>=' : ^greater_equal
      '+=' : ^add_assign
      '-=' : ^subtract_assign
      '*=' : ^multiply_assign
      '/=' : ^divide_assign
      '..' : ^range

      '.'  : ^dot
      '^'  : ^caret
      '='  : ^assign
      '+'  : ^add
      '-'  : ^subtract
      '*'  : ^multiply
      '/'  : ^divide
      '|'  : ^bar
      '('  : ^paren_right
      ')' : ^paren_left
      '['  : ^bracket_left
      ']'  : ^bracket_right
      '<'  : ^angle_left
      '>'  : ^angle_right
      '{'  : ^curly_right
      '}'  : ^curly_left

      comment() : ^comment
      accent()  : ^accent
      string()  : ^string
      ident()   : ^ident
      number()  : ^number
   }

   for key token in map
      matched = match_front(key input)
      match matched
         front back:
            span = len(front)

            token span back

         ^none: ^err

fn space()
   one_plus(' ')

fn number()
   [
      zero_one('-' or '+')
      zero_plus(digit())
      zero_one('.')
      one_plus(digit())
   ]

fn ident()
   [
      one_plus('_' or alpha())
      zero_plus(digit() or '_' or alpha())
   ]

fn comment()
   [
      '#'
      zero_plus(not '\n')
   ]

fn string()
   [
      '\''
      zero_plus('\\' or not ('\'' or '\n'))
      '\''
   ]

fn escape_pair()
   '\\' or escaped_char()

fn escaped_char()
   'n' or '\'' or '\\' or 'r' or 't' or '0'

fn digit()
   '0' .. '9'

fn alpha()
   'a' .. 'z' or 'A' .. 'Z'
